set(CLANG_TOOLS_VERSION 12) 
set(BUILD_SUPPORT_DIR "${CMAKE_SOURCE_DIR}/build_support")
set(CLANG_SEARCH_PATH "/usr/local/bin" "/usr/bin" "/usr/local/opt/llvm/bin" "/usr/local/opt/llvm@${CLANG_TOOLS_VERSION}/bin"
        "/opt/homebrew/opt/llvm@${CLANG_TOOLS_VERSION}/bin/")

# target defined: check-clang-tidy, check-clang-diff-diff
function(define_clang_tidy_targets)
    find_program(CLANG_TIDY_BIN
            NAMES clang-tidy "clang-tidy-${CLANG_TOOLS_VERSION}"
            HINTS ${CLANG_SEARCH_PATH})

    if("${CLANG_TIDY_BIN}" STREQUAL "CLANG_TIDY_BIN-NOTFOUND")
            message(WARNING "${PROJECT_NAME} couldn't find clang-tidy.")
    else()
            set(CMAKE_EXPORT_COMPILE_COMMANDS 1)
            message(STATUS "${PROJECT_NAME} found clang-tidy at ${CLANG_TIDY_BIN}")
    endif("${CLANG_TIDY_BIN}" STREQUAL "CLANG_TIDY_BIN-NOTFOUND")

    add_custom_target(check-clang-tidy
            ${BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
            -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary
            -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
    )
    add_custom_target(fix-clang-tidy
            ${BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
            -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary
            -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
            -clang-apply-replacements-binary ${CLANG_APPLY_REPLACEMENTS_BIN} # using our clang-apply-replacements binary
            -fix # apply suggested changes generated by clang-tidy
    )
    add_custom_target(check-clang-tidy-diff
            ${BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
            -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary
            -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
            -only-diff # only check diff files to master
    )
endfunction(define_clang_tidy_targets)

function(define_clang_format_targets)
        find_program(CLANG_FORMAT_BIN
                NAMES clang-format "clang-format-${CLANG_TOOLS_VERSION}"
                HINTS ${CLANG_SEARCH_PATH})

        if("${CLANG_FORMAT_BIN}" STREQUAL "CLANG_FORMAT_BIN-NOTFOUND")
                message(WARNING "${PROJECT_NAME} couldn't find clang-format.")
        else()
                message(STATUS "${PROJECT_NAME} found clang-format at ${CLANG_FORMAT_BIN}")
        endif()

        string(CONCAT FORMAT_DIRS
                "${CMAKE_CURRENT_SOURCE_DIR}/src,"
                "${CMAKE_CURRENT_SOURCE_DIR}/tests,"
                "${CMAKE_CURRENT_SOURCE_DIR}/benches,"
                "${CMAKE_CURRENT_SOURCE_DIR}/examples,"
        )
        # Runs clang format and updates files in place.
        add_custom_target(format ${BUILD_SUPPORT_DIR}/run_clang_format.py
                ${CLANG_FORMAT_BIN}
                ${BUILD_SUPPORT_DIR}/clang_format_exclusions.txt
                --source_dirs
                ${FORMAT_DIRS}
                --fix
                --quiet
        )

        # Runs clang format and exits with a non-zero exit code if any files need to be reformatted
        add_custom_target(check-format ${BUILD_SUPPORT_DIR}/run_clang_format.py
                ${CLANG_FORMAT_BIN}
                ${BUILD_SUPPORT_DIR}/clang_format_exclusions.txt
                --source_dirs
                ${FORMAT_DIRS}
                --quiet
        )
endfunction(define_clang_format_targets)

